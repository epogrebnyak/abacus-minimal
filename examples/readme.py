"""This file is automatically generated from README.md"""

from abacus import Book, Chart, Entry

chart = Chart(
    retained_earnings="retained_earnings",
    current_earnings="current_earnings",
    assets=["cash"],
    capital=["equity"],
    income=["services"],
    expenses=["salaries", "rent"],
)
book = Book(chart)
entries = [
    Entry("Initial shareholder investment").amount(1000).debit("cash").credit("equity"),
    Entry("Paid office rent").amount(100).debit("rent").credit("cash"),
    Entry("Accepted cash for services").amount(400).debit("cash").credit("services"),
    Entry("Paid salaries in cash").amount(350).debit("salaries").credit("cash"),
]
book.post_many(entries)
book.close()
print(book.income_statement)
print(book.balance_sheet)
# Some checks
assert book.income_statement.net_earnings == -50
assert book.balances == {"cash": 950, "equity": 1000, "retained_earnings": -50}


chart = Chart(
    retained_earnings="retained_earnings",
    current_earnings="current_earnings",
    assets=["cash", "ar"],
    capital=["equity"],
    liabilities=["vat_payable"],
    income=["sales"],
    expenses=["salaries"],
)
chart.offset("sales", "refunds")
chart.name("ar", "Accounts receivable")

chart.save("chart.json")
chart = Chart.load("chart.json")


book = Book(chart)
opening_balances = {"cash": 10_000, "equity": 8_000, "retained_earnings": 2_000}
book.open(opening_balances)


entries = [
    Entry("Invoice with VAT")
    .debit("ar", 6000)
    .credit("sales", 5000)
    .credit("vat_payable", 1000),
    Entry("Cash payment").debit("cash", 6000).credit("ar", 6000),
    Entry("Cashback").double(debit="refunds", credit="cash", amount=500),
    Entry("Paid salaries").amount(1500).debit("salaries").credit("cash"),
]

# Post entries to book
book.post_many(entries)

# Show trial balance and account balances
print(book.trial_balance)
print(book.balances)

# Check account balances match expected values
assert book.balances == {
    "cash": 14000,
    "ar": 0,
    "equity": 8000,
    "vat_payable": 1000,
    "sales": 5000,
    "refunds": 500,
    "salaries": 1500,
    "current_earnings": 0,
    "retained_earnings": 2000,
}

print("=== Before closing ===")
print(book.income_statement)
print(book.balance_sheet)
assert book.balance_sheet.capital["current_earnings"] == 3000

# Close accounts at period end
book.close()

print("=== After closing ===")
print(book.income_statement)
print(book.balance_sheet)

# Check account balances match expected values
print(book.balances)
assert book.balances == {
    "cash": 14000,
    "ar": 0,
    "equity": 8000,
    "vat_payable": 1000,
    "retained_earnings": 5000,
}

# Save JSON files
book.store.save("./entries.json")
book.balances.save("./end_balances.json")
